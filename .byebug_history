c
cache job
cache
cachw
c
apply.reload
apply
c
@apply
c
response
expect(response).to render_template("index")
get :index
c
render json: @jobs, status: :okc
@jobs = Job.where(job_category: params[:job_category]).order("created_at desc")
params[:job_category].present?
c
render json: @jo
@jobs
@jobs = Job.where(job_category: params[:job_category]).order("created_at desc")
params.has_key?(:job_category)
job_category
c
job.reload
event.reload
response.body
c
response.body
c
get :index
user
request.headers['Authorization'] = "Bearer #{AuthenticationTokenService.encode_token(user.id)}"
user
c
get :index
request.headers['Authorization'] = "Bearer #{AuthenticationTokenService.encode_token(user.id)}"
c
request.headers['Authorization'] = "Bearer #{AuthenticationTokenService.encode_token(user.id)}"
AuthenticationTokenService.encode_token(user.id)
user
AuthenticationTokenService.encode_token(user.id)
c
render_template(:new)
response
c
v
c
login_user
user
c
login_user
c
user
c
login_user
c
n
login_user
c
n
login_user
c
user
login_user
c
sign_in(user)
user
c
n
user
c
get :index
c
current_user
user_signed_in?
user
c
n
c
post :login, params: { email: "johndoe@example.com", password: "john123" }
user
c
user
c
user
c
current_user
 post :create, params:{ job: { title: "Full Stack Developer", description: "This is a job", job_category: "Computer Science", location: "Indore", job_author: "Ram", job_company: "Tcs", salary: 4} }
ost :create, params:{ job: { title: "Full Stack Developer", description: "This is a job", job_category: "Computer Science", location: "Indore", job_author: "Ram", job_company: "Tcs", salary: 4}
c
response
c
user
user_signed_in?
user_signed_in 
if user_signed_in
if user_signed_in?
user_signed_in?
c
sign_in(user)
user
c
user
get :index
sign_in(user)
user
c
params
c
params
c
token
response.body
response
post :login, params: {email: "rakesh@example.com", password: "rakesh12"}
c
post :login, params: {email: "rakesh@example.com", password: "rakesh123"}
c
expect(response).to have_http_status(200)
post :login, params: {email: "manoj@example.com", password: "manoj123"}
c
params
c
params
c
params
c
jwtr.destroy("eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjozOSwiZXhwIjoxNjk5NTMyOTk3fQ.iqOcITio1eHdZTmNA-3cYkYguC1iD-OaCxvEI7NkG-Q")
token
c
token
n
token
c
token
c
current_user
c
@apply
c
@apply
current_user
c
Job.find(params[:job_id])
@apply.user = current_user
current_user
c
@apply
@apply.user_id = 23
@apply.user_id
@apply
c
n
@apply
current_user
c
@apply
current_user
c
@apply.save!
@apply.save
current_user
@apply
@apply.user
@apply.job
c
@apply.user = current_user
Apply.new(app_params)
app_params
c
@apply
c
@apply
c
@apply
c
@apply
c
params
@apply
c
@job
c
current_user.role
c
current_user.role
c
current_user.admin
current_user
curre
@job
c
token
c
current_user
c
current_user
c
cc
current_user
c
User.find(decoded['user_id'])
c
decoded
c
User.find(decoded['user_id'])
@current_user
c
decoded
c
User.find(decoded['user_id'])
@current_user
decoded
c
decoded
token
c
token
c
current_user
token
c
user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
